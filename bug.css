The following CSS code snippet exhibits an uncommon error related to specificity and inheritance:

```css
div {
  font-size: 16px;
}

.container div {
  font-size: 18px;
}

.container p {
  font-size: 20px;
}

.container span {
  font-size: 14px !important;
}
```

The issue arises when a `<span>` element is nested within a `<div>` inside the `.container` class.  While we expect the span to inherit the `font-size: 18px` from its parent div (due to the `.container div` selector), and then be overridden by `font-size: 14px !important`, the `!important` declaration only works on the direct application of the style, not considering inheritance.

If you anticipate the inheritance behavior, the `!important` will override this, resulting in unexpected output where the span only receives `14px`. This is non-intuitive because the `!important` is often used to override styles cascading down from the parent, but in this case, the order of application is important, and the inheritance is not considered in the `!important` context.